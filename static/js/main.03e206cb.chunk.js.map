{"version":3,"sources":["assets/ycttrn-logo-400-crop.png","components/RangeSlider.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","width","input","InputSlider","props","classes","React","useState","value","setValue","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","onChange","event","newValue","setRadius","aria-labelledby","min","max","step","Input","margin","target","Number","onBlur","inputProps","type","MAPBOX_TOKEN","process","Map","selectedPoint","e","setState","lngLat","fetchNearbyPoints","a","async","_nearbyPoints","filterByRadius","state","radius","nearbyPoints","lat","lon","r","filteredData","data","forEach","obj","from","turf","to","longitude","latitude","push","generateIcon","icon","faShoppingBasket","color","faSubway","faSchool","faMedkit","faBus","style","fontSize","opacity","faPlus","faMapMarker","_radius","handleViewportChange","viewport","handleGeocoderViewportChange","transitionDuration","geocoderResult","coords","result","geometry","coordinates","mapRef","createRef","height","zoom","position","zIndex","backgroundColor","padding","borderRadius","right","boxShadow","direction","justify","this","Button","variant","onClick","alert","ref","mapboxApiAccessToken","onViewportChange","onDblClick","doubleClickZoom","mapStyle","backgroundImage","logoSmall","backgroundRepeat","left","transform","bottom","textAlign","onResult","countries","key","faMapPin","map","point","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03e206cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ycttrn-logo-400-crop.8a69fb46.png\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250\n  },\n  input: {\n    width: 60\n  }\n});\n\nconst DEFAULT_VALUE = 1000;\nconst MIN_VALUE = 0;\nconst MAX_VALUE = 1000;\nconst STEP = 10;\n\nexport default function InputSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(DEFAULT_VALUE);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n    props.setRadius(newValue);\n  };\n\n  const handleInputChange = event => {\n    let value = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    if (value < MIN_VALUE) {\n      setValue(MIN_VALUE);\n      props.setRadius(MIN_VALUE);\n    } else if (value > MAX_VALUE) {\n      setValue(MAX_VALUE);\n      props.setRadius(MAX_VALUE);\n    } else {\n      setValue(value);\n      props.setRadius(value);\n    }\n  };\n\n  const handleBlur = () => {\n    if (value < MIN_VALUE) {\n      setValue(MIN_VALUE);\n    } else if (value > MAX_VALUE) {\n      setValue(MAX_VALUE);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        Radius (meters)\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            onChange={handleSliderChange}\n            aria-labelledby=\"input-slider\"\n            min={MIN_VALUE}\n            max={MAX_VALUE}\n            step={STEP}\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: STEP,\n              min: MIN_VALUE,\n              max: MAX_VALUE,\n              type: \"number\",\n              \"aria-labelledby\": \"input-slider\"\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport ReactMap, { Marker } from \"react-map-gl\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMapMarker,\n  faMapPin,\n  faShoppingBasket,\n  faSubway,\n  faSchool,\n  faMedkit,\n  faBus,\n  faPlus\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Geocoder from \"react-map-gl-geocoder\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nimport logoSmall from \"../assets/ycttrn-logo-400-crop.png\";\nimport RangeSlider from \"./RangeSlider\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport data from \"../data/db.json\";\nimport * as turf from \"@turf/turf\";\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewport: {\n        latitude: 45.5017,\n        longitude: -73.5673,\n        width: \"100vw\",\n        height: \"100vh\",\n        zoom: 13\n      },\n      radius: 1000, //In meters\n      selectedPoint: null,\n      nearbyPoints: []\n    };\n  }\n\n  selectedPoint = e => {\n    this.setState(\n      {\n        selectedPoint: e.lngLat\n      },\n      () => this.fetchNearbyPoints()\n    );\n  };\n\n  fetchNearbyPoints = async () => {\n    let _nearbyPoints = this.filterByRadius(\n      this.state.selectedPoint[1],\n      this.state.selectedPoint[0],\n      this.state.radius\n    );\n    this.setState({\n      nearbyPoints: _nearbyPoints\n    });\n  };\n\n  filterByRadius = (lat, lon, r) => {\n    let filteredData = [];\n    data.forEach(obj => {\n      const from = turf.point([lon, lat]);\n      const to = turf.point([obj.longitude, obj.latitude]);\n      const distance = turf.distance(from, to) * 1000;\n      if (distance <= r) {\n        filteredData.push(obj);\n      }\n    });\n    return filteredData;\n  };\n\n  generateIcon = type => {\n    switch (type) {\n      case \"grocery\":\n        return <FontAwesomeIcon icon={faShoppingBasket} color=\"#74ba5d\" />;\n      case \"subway\":\n        return <FontAwesomeIcon icon={faSubway} color=\"#8b32bf\" />;\n      case \"school\":\n        return <FontAwesomeIcon icon={faSchool} color=\"#5d87ba\" />;\n      case \"health\":\n        return <FontAwesomeIcon icon={faMedkit} color=\"#d9a64e\" />;\n      case \"bus_stop\":\n        return (\n          <FontAwesomeIcon\n            icon={faBus}\n            color=\"#32bf9c\"\n            style={{ fontSize: 3, opacity: 0.5 }}\n          />\n        );\n      case \"hospital\":\n        return <FontAwesomeIcon icon={faPlus} color=\"#ff1100\" />;\n      default:\n        return <FontAwesomeIcon icon={faMapMarker} />;\n    }\n  };\n\n  setRadius = _radius => {\n    this.setState({\n      radius: _radius\n    });\n  };\n\n  handleViewportChange = viewport => {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  };\n\n  handleGeocoderViewportChange = viewport => {\n    const geocoderDefaultOverrides = { transitionDuration: 1000 };\n\n    return this.handleViewportChange({\n      ...viewport,\n      ...geocoderDefaultOverrides\n    });\n  };\n\n  geocoderResult = e => {\n    let coords = e.result.geometry.coordinates;\n    this.setState(\n      {\n        selectedPoint: coords\n      },\n      () => this.fetchNearbyPoints()\n    );\n  };\n\n  mapRef = React.createRef();\n\n  render() {\n    return (\n      <div>\n        {/* Radius bar */}\n        <div\n          style={{\n            position: \"absolute\",\n            zIndex: 1,\n            backgroundColor: \"white\",\n            padding: 10,\n            borderRadius: 5,\n            right: 0,\n            margin: 10,\n            boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\"\n          }}\n        >\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n            <RangeSlider setRadius={this.setRadius} style={{ margin: 10 }} />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ margin: 10 }}\n              onClick={() => {\n                if (this.state.selectedPoint === null) {\n                  alert(\"Select a point\");\n                } else {\n                  this.fetchNearbyPoints();\n                }\n              }}\n            >\n              Find\n            </Button>\n          </Grid>\n        </div>\n\n        <ReactMap\n          ref={this.mapRef}\n          {...this.state.viewport}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          onViewportChange={this.handleViewportChange}\n          onDblClick={this.selectedPoint}\n          doubleClickZoom={false} //For double click pin\n          mapStyle={\"mapbox://styles/mapbox/dark-v10\"}\n        >\n          {/* Logo */}\n          <div\n            style={{\n              backgroundImage: `url(${logoSmall})`,\n              position: \"absolute\",\n              zIndex: 1,\n              height: 180,\n              width: 400,\n              backgroundRepeat: \"no-repeat\",\n              left: \"50%\",\n              transform: \"translate(-200px)\",\n              color: \"white\"\n            }}\n          >\n            <p\n              style={{\n                bottom: -36,\n                left: \"50%\",\n                transform: \"translate(-50%)\",\n                margin: \"auto\",\n                position: \"absolute\",\n                backgroundColor: \"#333333\",\n                padding: 5,\n                borderRadius: 5,\n                opacity: 0.5\n              }}\n            >\n              Double click the map to add a pin. Scroll to zoom.\n            </p>\n          </div>\n          {/* Instructions */}\n          <div\n            style={{\n              backgroundColor: \"#333333\",\n              color: \"white\",\n              position: \"absolute\",\n              zIndex: 1,\n              bottom: 0,\n              opacity: 0.7,\n              padding: 10,\n              margin: 10,\n              borderRadius: 5,\n              textAlign: \"left\"\n            }}\n          >\n            <p>\n              <FontAwesomeIcon icon={faShoppingBasket} color=\"#74ba5d\" />\n              &nbsp;Grocery store\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faSubway} color=\"#8b32bf\" />\n              &nbsp;Metro station\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faSchool} color=\"#5d87ba\" />\n              &nbsp;School\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faMedkit} color=\"#d9a64e\" />\n              &nbsp;Medical clinic\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faBus} color=\"#32bf9c\" />\n              &nbsp;Bus stop\n            </p>\n            <p>\n              <FontAwesomeIcon icon={faPlus} color=\"#ff1100\" />\n              &nbsp;Hospital\n            </p>\n          </div>\n          {/* Search bar */}\n          <Geocoder\n            mapRef={this.mapRef}\n            onViewportChange={this.handleGeocoderViewportChange}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            position=\"top-left\"\n            onResult={this.geocoderResult}\n            countries=\"ca\"\n          />\n          {/* Selection Marker*/}\n          {this.state.selectedPoint !== null && (\n            <Marker\n              key=\"selection\"\n              latitude={this.state.selectedPoint[1]}\n              longitude={this.state.selectedPoint[0]}\n            >\n              <FontAwesomeIcon\n                icon={faMapPin}\n                color=\"#bf3232\"\n                style={{ fontSize: 24 }}\n              />\n            </Marker>\n          )}\n          {/* Result markers */}\n          {this.state.nearbyPoints.map(point => (\n            <Marker\n              key={point.id}\n              latitude={point.latitude}\n              longitude={point.longitude}\n            >\n              {this.generateIcon(point.type)}\n            </Marker>\n          ))}\n        </ReactMap>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Map from \"./components/Map\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}